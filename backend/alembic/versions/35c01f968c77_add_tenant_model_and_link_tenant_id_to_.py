"""Add Tenant model and link tenant_id to User and Project tables

Revision ID: 35c01f968c77
Revises: a7affed04f8a
Create Date: 2025-06-02 19:15:23.768503

"""
from typing import Sequence, Union
from datetime import datetime, timezone

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '35c01f968c77'
down_revision: Union[str, None] = 'a7affed04f8a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


# Modified upgrade() function in your new migration script:
def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. Create the 'tenants' table
    tenants_table = op.create_table('tenants',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('logo_url', sa.String(), nullable=True),
        sa.Column('background_image_url', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tenants_id'), 'tenants', ['id'], unique=False)
    op.create_index(op.f('ix_tenants_name'), 'tenants', ['name'], unique=True)
    
    # 2. Add 'tenant_id' to 'projects' table (initially nullable)
    op.add_column('projects', sa.Column('tenant_id', sa.Integer(), nullable=True))
    op.create_foreign_key(
        op.f('fk_projects_tenant_id_tenants'), # Alembic 7+ auto-generates constraint names with op.f()
        'projects', 'tenants', 
        ['tenant_id'], ['id']
    )
    
    # 3. Add 'tenant_id' to 'users' table (initially nullable)
    op.add_column('users', sa.Column('tenant_id', sa.Integer(), nullable=True))
    op.create_foreign_key(
        op.f('fk_users_tenant_id_tenants'), # Alembic 7+ auto-generates constraint names
        'users', 'tenants', 
        ['tenant_id'], ['id']
    )
    # ### end Alembic commands ###

    # --- Manual additions for data migration ---
    # 4. Insert a default tenant (ID will likely be 1 if table is new)
    #    If you run this migration multiple times after a downgrade for testing,
    #    you might want to check if the default tenant already exists.
    #    For a first run, this is usually fine.
    op.bulk_insert(tenants_table,
        [
            {
                'name': 'Default Tenant', 
                'created_at': datetime.now(timezone.utc) 
                # Add default logo_url or background_image_url here if desired
            }
        ]
    )
    
    # Determine the ID of the Default Tenant.
    # In a clean setup, this will be 1.
    # For robustness in scripts, one might query it, but for a one-time migration default_tenant_id = 1 is often assumed.
    # If you have a specific ID for your default tenant (e.g. from a previous partial run), set it here.
    default_tenant_id = 1 
    
    # 5. Update existing users to belong to the default tenant
    op.execute(f'UPDATE users SET tenant_id = {default_tenant_id} WHERE tenant_id IS NULL')
    
    # 6. Update existing projects to belong to the default tenant
    op.execute(f'UPDATE projects SET tenant_id = {default_tenant_id} WHERE tenant_id IS NULL')

    # 7. Now, alter the columns to be NOT NULL
    op.alter_column('users', 'tenant_id', nullable=False)
    op.alter_column('projects', 'tenant_id', nullable=False)
    # --- End manual additions ---


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Reverse operations in opposite order

    # Remove NOT NULL constraints first (if applicable and if altering back to nullable)
    # This might be implicitly handled by dropping the column, but explicit is safer
    op.alter_column('projects', 'tenant_id', nullable=True)
    op.alter_column('users', 'tenant_id', nullable=True)

    # Drop foreign keys before dropping columns or the tenants table
    op.drop_constraint(op.f('fk_users_tenant_id_tenants'), 'users', type_='foreignkey')
    op.drop_column('users', 'tenant_id')
    
    op.drop_constraint(op.f('fk_projects_tenant_id_tenants'), 'projects', type_='foreignkey')
    op.drop_column('projects', 'tenant_id')
    
    # Drop tenants table and its indexes
    op.drop_index(op.f('ix_tenants_name'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_id'), table_name='tenants')
    op.drop_table('tenants')
    # ### end Alembic commands ###
    # Note: The data inserted (Default Tenant) and data updates (setting tenant_id for existing rows)
    # are not typically reversed in a downgrade, as downgrades focus on schema.
