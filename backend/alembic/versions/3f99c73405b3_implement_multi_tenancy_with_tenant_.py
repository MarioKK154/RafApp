"""Implement multi-tenancy with Tenant model and links to User and Project

Revision ID: 3f99c73405b3
Revises: 35c01f968c77
Create Date: 2025-06-08 12:36:33.514918

"""
from typing import Sequence, Union
from datetime import datetime, timezone # Ensure datetime and timezone are imported

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '3f99c73405b3'
down_revision: Union[str, None] = '35c01f968c77'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Create the new 'tenants' table first
    tenants_table = op.create_table('tenants',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('logo_url', sa.String(), nullable=True),
        sa.Column('background_image_url', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tenants_id'), 'tenants', ['id'], unique=False)
    op.create_index(op.f('ix_tenants_name'), 'tenants', ['name'], unique=True)
    
    # Step 2: Add tenant_id columns to existing tables, making them NULLABLE at first
    op.add_column('projects', sa.Column('tenant_id', sa.Integer(), nullable=True))
    op.create_foreign_key(
        op.f('fk_projects_tenant_id_tenants'),
        'projects', 'tenants', 
        ['tenant_id'], ['id']
    )
    
    op.add_column('users', sa.Column('tenant_id', sa.Integer(), nullable=True))
    op.create_foreign_key(
        op.f('fk_users_tenant_id_tenants'),
        'users', 'tenants', 
        ['tenant_id'], ['id']
    )
    
    # --- Manual additions for data migration ---
    
    # Step 3: Insert a default tenant record to assign existing data to.
    # Its ID will be 1 if the tenants table is empty.
    op.bulk_insert(tenants_table,
        [
            {
                'name': 'Default Tenant',
                'created_at': datetime.now(timezone.utc)
            }
        ]
    )
    
    # We will assume the default tenant we just created has an ID of 1.
    # This is safe for a new setup.
    default_tenant_id = 1 

    # Step 4: Update all existing users and projects to belong to this default tenant.
    op.execute(f'UPDATE users SET tenant_id = {default_tenant_id} WHERE tenant_id IS NULL')
    op.execute(f'UPDATE projects SET tenant_id = {default_tenant_id} WHERE tenant_id IS NULL')

    # Step 5: Now that all rows are populated, alter the columns to be NOT NULL.
    op.alter_column('users', 'tenant_id', existing_type=sa.INTEGER(), nullable=False)
    op.alter_column('projects', 'tenant_id', existing_type=sa.INTEGER(), nullable=False)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Reverse operations in opposite order

    # First, drop the foreign key constraints from users and projects
    op.drop_constraint(op.f('fk_users_tenant_id_tenants'), 'users', type_='foreignkey')
    op.drop_constraint(op.f('fk_projects_tenant_id_tenants'), 'projects', type_='foreignkey')

    # Then, drop the columns
    op.drop_column('users', 'tenant_id')
    op.drop_column('projects', 'tenant_id')

    # Finally, drop the tenants table and its indexes
    op.drop_index(op.f('ix_tenants_name'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_id'), table_name='tenants')
    op.drop_table('tenants')
    # ### end Alembic commands ###