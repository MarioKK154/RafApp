# backend/app/crud.py
# Uncondensed Version: Updated User CRUD for new fields
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import desc, asc, func as sqlfunc
from typing import Optional, List
from datetime import datetime, timezone
from . import models, schemas
from .security import get_password_hash

# --- User CRUD Operations ---
def get_user(db: Session, user_id: int) -> Optional[models.User]:
    return db.query(models.User).filter(models.User.id == user_id).first()

def get_user_by_email(db: Session, email: str) -> Optional[models.User]:
    return db.query(models.User).filter(models.User.email == email).first()

def get_users(db: Session, skip: int = 0, limit: int = 100) -> List[models.User]:
    return db.query(models.User).offset(skip).limit(limit).all()

def create_user(db: Session, user: schemas.UserCreate) -> models.User:
    hashed_password = get_password_hash(user.password)
    db_user = models.User(
        email=user.email,
        hashed_password=hashed_password,
        full_name=user.full_name,
        # New fields are not set by public registration
        role="employee",
        is_active=True,
        is_superuser=False
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

def update_user_by_admin(db: Session, user_to_update: models.User, user_data: schemas.UserUpdateAdmin) -> models.User:
    update_data = user_data.model_dump(exclude_unset=True) # Important to only update provided fields
    for key, value in update_data.items():
        if hasattr(user_to_update, key):
            setattr(user_to_update, key, value)
    db.add(user_to_update)
    db.commit()
    db.refresh(user_to_update)
    return user_to_update

def create_user_by_admin(db: Session, user_data: schemas.UserCreateAdmin) -> models.User:
    hashed_password = get_password_hash(user_data.password)
    db_user = models.User(
        email=user_data.email,
        hashed_password=hashed_password,
        full_name=user_data.full_name,
        kennitala=user_data.kennitala, # New field
        phone_number=user_data.phone_number, # New field
        location=user_data.location, # New field
        role=user_data.role if user_data.role else "employee",
        is_active=user_data.is_active if user_data.is_active is not None else True,
        is_superuser=user_data.is_superuser if user_data.is_superuser is not None else False,
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

# --- Project CRUD --- (No changes in these functions)
def get_project(db: Session, project_id: int) -> Optional[models.Project]: #...
def get_projects(db: Session, status: Optional[str] = None, sort_by: Optional[str] = None, sort_dir: Optional[str] = 'asc', skip: int = 0, limit: int = 100) -> List[models.Project]: #...
def create_project(db: Session, project: schemas.ProjectCreate, creator_id: int) -> models.Project: #...
def update_project(db: Session, project_id: int, project_update: schemas.ProjectUpdate) -> Optional[models.Project]: #...
def delete_project(db: Session, project_id: int) -> Optional[models.Project]: #...

# --- Project Membership CRUD --- (No changes in these functions)
def add_member_to_project(db: Session, project: models.Project, user: models.User) -> bool: #...
def remove_member_from_project(db: Session, project: models.Project, user: models.User) -> bool: #...
def get_project_members(db: Session, project_id: int) -> List[models.User]: #...
def is_user_member_of_project(db: Session, project_id: int, user_id: int) -> bool: #...

# --- Task CRUD & Assignment --- (No changes in these functions)
def get_task(db: Session, task_id: int) -> Optional[models.Task]: #...
def get_tasks(db: Session, project_id: Optional[int] = None, assignee_id: Optional[int] = None, sort_by: Optional[str] = None, sort_dir: Optional[str] = 'asc', skip: int = 0, limit: int = 100) -> List[models.Task]: #...
def create_task(db: Session, task: schemas.TaskCreate) -> models.Task: #...
def update_task(db: Session, task_id: int, task_update: schemas.TaskUpdate) -> Optional[models.Task]: #...
def delete_task(db: Session, task_id: int) -> Optional[models.Task]: #...
def assign_user_to_task(db: Session, task: models.Task, user: models.User) -> models.Task: #...
def unassign_user_from_task(db: Session, task: models.Task) -> models.Task: #...
def get_tasks_assigned_to_user(db: Session, user_id: int, skip: int = 0, limit: int = 100) -> List[models.Task]: #...

# --- Task Comment CRUD --- (No changes in these functions)
def get_comment(db: Session, comment_id: int) -> Optional[models.TaskComment]: #...
def get_comments_for_task(db: Session, task_id: int, skip: int = 0, limit: int = 100) -> List[models.TaskComment]: #...
def create_task_comment(db: Session, comment: schemas.TaskCommentCreate, task_id: int, author_id: int) -> models.TaskComment: #...
def delete_comment(db: Session, comment_id: int) -> Optional[models.TaskComment]: #...

# --- Inventory CRUD --- (No changes in these functions for THIS step)
def get_inventory_item(db: Session, item_id: int) -> Optional[models.InventoryItem]: #...
def get_inventory_items(db: Session, skip: int = 0, limit: int = 100) -> List[models.InventoryItem]: #...
def create_inventory_item(db: Session, item: schemas.InventoryItemCreate) -> models.InventoryItem: #...
def update_inventory_item(db: Session, item_id: int, item_update: schemas.InventoryItemUpdate) -> Optional[models.InventoryItem]: #...
def update_inventory_item_needed_quantity(db: Session, item_id: int, quantity_needed: float) -> Optional[models.InventoryItem]: #...
def delete_inventory_item(db: Session, item_id: int) -> Optional[models.InventoryItem]: #...
def get_shopping_list_items(db: Session) -> List[models.InventoryItem]: #...

# --- Drawing Metadata CRUD --- (No changes in these functions)
def get_drawing(db: Session, drawing_id: int) -> Optional[models.Drawing]: #...
def get_drawings_for_project(db: Session, project_id: int, skip: int = 0, limit: int = 100) -> List[models.Drawing]: #...
def create_drawing_metadata(db: Session, drawing: schemas.DrawingCreate) -> models.Drawing: #...
def delete_drawing_metadata(db: Session, drawing_id: int) -> Optional[models.Drawing]: #...

# --- TimeLog CRUD --- (No changes in these functions)
def get_open_timelog_for_user(db: Session, user_id: int) -> Optional[models.TimeLog]: #...
def create_timelog_entry(db: Session, timelog_data: schemas.TimeLogCreate, user_id: int) -> models.TimeLog: #...
def update_timelog_entry(db: Session, timelog_id: int) -> Optional[models.TimeLog]: #...
def get_timelogs_for_user(db: Session, user_id: int, skip: int = 0, limit: int = 100) -> List[models.TimeLog]: #...
def get_timelogs_for_project(db: Session, project_id: int, skip: int = 0, limit: int = 100) -> List[models.TimeLog]: #...

# --- Task Photo Metadata CRUD --- (No changes in these functions)
def get_task_photo(db: Session, photo_id: int) -> Optional[models.TaskPhoto]: #...
def get_photos_for_task(db: Session, task_id: int, skip: int = 0, limit: int = 100) -> List[models.TaskPhoto]: #...
def create_task_photo_metadata(db: Session, photo_data: schemas.TaskPhotoCreate) -> models.TaskPhoto: #...
def delete_task_photo_metadata(db: Session, photo_id: int) -> Optional[models.TaskPhoto]: #...

# --- Copy/Paste Placeholders - Ensure these are the actual full functions above ---